# This is a basic workflow to help you get started with Actions

name: CI + deploy to Test

# Controls when the workflow will run
on:
  push:
    branches:
      - main
    paths:
      - 'app/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  builds:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Update git user
      run: git config --global user.name "${{ github.event.pusher.name }}"

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - id: release
      uses: rymndhng/release-on-push-action@master
      with:
        bump_version_scheme: patch

    - name: checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - run: git fetch --force --tags
    
    - name: Jira Login
      uses: atlassian/gajira-login@v3
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - id: goreleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_NAME: demo-app
        
    - id: find-issue-main
      name: Find in merged commit messages
      uses: atlassian/gajira-find-issue-key@v3
      with:
        string: ${{ github.event.head_commit.message }}

    - name: Comment on issue
      uses: atlassian/gajira-comment@v3
      with:
        issue: ${{ steps.find-issue-main.outputs.issue }}
        comment: ${{ github.event.pusher.name }} new version ${{ steps.release.outputs.tag_name }} built and pushed to registry
 
    - name: Modify file
      run: |
        # Use sed to replace the tag in the file with the ARTIFACT_NAME
        sed -i "s/tag:.*/tag: ${{ steps.release.outputs.tag_name }}/g" values-dev.yaml

    - name: Construct New Branch Name
      run: echo "BRANCH_NAME=${{ steps.find-issue-main.outputs.issue }}-auto-image-tag-update-${{ steps.release.outputs.tag_name }}" >> "$GITHUB_OUTPUT"
      id: branch-name
      
    - name: Check for changes
      run: |
        cat values-dev.yaml
        git status

    - name: Stage updated values-dev.yaml
      run: git add .
      
    - name: Commit changes
      run: git commit -m "${{ steps.find-issue-main.outputs.issue }} auto-updating values-dev.yaml with new build tag ${{ steps.release.outputs.tag_name }}"

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        branch: ${{ steps.branch-name.outputs.BRANCH_NAME }}
        commit-message: "${{ steps.find-issue-main.outputs.issue }} auto-updating values-dev.yaml with new build tag ${{ steps.release.outputs.tag_name }} and merging"
      id: cpr

    - name: Merge Pull Request
      uses: juliangruber/merge-pull-request-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.cpr.outputs.pull-request-number }}
        method: merge

    - name: Comment on issue
      if: "contains(github.ref, 'main')"
      uses: atlassian/gajira-comment@v3
      with:
        issue: ${{ steps.find-issue-main.outputs.issue }}
        comment: ${{ github.event.pusher.name }} PR automatically merged to update values-dev.yml
        
